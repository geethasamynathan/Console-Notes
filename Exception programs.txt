Exception Handling:
------------------
Exception Handling in C# is a process to handle runtime errors. We perform exception handling so that normal flow of the application can be maintained even after runtime errors.

In C#, exception is an event or object which is thrown at runtime. All exceptions  derived from System.Exception class. It is a runtime error which can be handled. If we don't handle the exception, it prints exception message and terminates the program.

Advantage:
----------
 exceptions need to be handle to prevent crashing of program


All the exception classes in C# are derived from System.Exception class. Let's see the list of C# common exception classes.

	Exception				Description

System.DivideByZeroException		handles the error generated by dividing a number with zero.

System.NullReferenceException		handles the error generated by referencing the null object.

System.InvalidCastException		handles the error generated by invalid typecasting.

System.IO.IOException			handles the Input Output errors.

System.FieldAccessException		handles the error generated by invalid private or protected 								field access.

we use 4 keywords to perform exception handling:

try
catch
finally, and
throw



  class Class1
    {
        public static void Main()
        {
            int x, y, z;
            try
            {
                Console.WriteLine("Enter the 2 integer values");
                x = int.Parse(Console.ReadLine());
                y = int.Parse(Console.ReadLine());
                z = x / y;
                Console.WriteLine("  x + y =" + z);
            }            
            catch (DivideByZeroException e1)
            {
                Console.WriteLine(" DivideByZero Exception : " + e1.Message);
            }
            catch (Exception e)
            {
                Console.WriteLine(" Gerenal Exception Occured : \n " + e.Message);
            }
            finally
            {
                Console.WriteLine(" End of the Program");
            }
            Console.ReadKey();
        }
    }
}

====================================================================

class ExceptionDemo
    {
        public void MethodDivide()
        {         try
            {   int a, b;
                Console.WriteLine("Enter the Divisor and Dividend:");
                a = int.Parse(Console.ReadLine());
                b = Convert.ToInt32(Console.ReadLine());
                int c = a / b;
                Console.WriteLine("The Quotient: " + c);
            }
            catch (DivideByZeroException ex)
            {   Console.WriteLine("Specific Exception: "+ex.TargetSite  );
                throw ex;  //--Rethrowing an exception
            }
            catch (Exception ex) //--Generalised Exception
            { Console.WriteLine("Generalised Exception: " + ex.Message);
            }
            finally
            {Console.WriteLine("Finally Block of Statement will be executed irrespective of an exception");
            }
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            ExceptionDemo obj = new ExceptionDemo();
          //  obj.MethodDivide();
            try
            {
                obj.MethodDivide();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Rethrown Exception: " + ex.TargetSite);
            }
            Console.ReadKey();
        }
    }
}
============================================================================


namespace _30.ExceptionHandling
{
    class UserDefined_Exception:ApplicationException 
    {
        
        static void Main()
        {
            int age;
            Console.WriteLine(" Enter the Age should between 18 to 70");
            age = Convert.ToInt32(Console.ReadLine());
            try
            {
                if (age < 17 || age >=70)
                {
                    throw new Exception("Age should be 18 - 70");               
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message );
            }
            Console.ReadLine();
        }
    }
}

===============================================================================================
namespace Exception_Handling_demos
{
    class AgeException : ApplicationException
    {
        string s;
        public AgeException(string str)
        {
            s = str + " is Invalid Age .Age should be 20 to 60";
        }
        public override string ToString()
        {
            return s;
        }
    }

    class Custome_exception2
    {
        static void Main(string[] args)
        {
            try
            {
                string age;
                age = Console.ReadLine();
                int n = int.Parse(age);
                if (n < 20 || n > 60)
                {
                    throw new AgeException(age);
                }
            }
            catch(Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
}
=============================================================================================





